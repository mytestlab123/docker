name: Podman Multi-Folder Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      folders: ${{ steps.changes.outputs.folders }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Detect changed folders
      id: changes
      run: |
        # Get all folders that contain Dockerfiles (excluding root)
        echo "=== Debugging folder detection ==="
        find . -name "Dockerfile" -not -path "./.git/*"
        echo "=== Processing folders ==="
        FOLDERS=$(find . -mindepth 2 -name "Dockerfile" -not -path "./.git/*" | xargs dirname | cut -c3- | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
        echo "folders=$FOLDERS" >> $GITHUB_OUTPUT
        echo "Found folders with Dockerfiles: $FOLDERS"

  build:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.folders != '[]'
    strategy:
      matrix:
        folder: ${{ fromJson(needs.detect-changes.outputs.folders) }}
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Podman, Buildah, and Skopeo
      run: |
        # Update package list
        sudo apt-get update
        
        # Install Podman, Buildah, and Skopeo
        sudo apt-get install -y podman buildah skopeo
        
        # Verify installations
        podman --version
        buildah --version
        skopeo --version
        
        # Configure for rootless operation
        echo "Configuring rootless containers..."
        
    - name: Generate image name
      id: image
      run: |
        FOLDER_NAME="${{ matrix.folder }}"
        # Validate folder name is not empty
        if [ -z "$FOLDER_NAME" ]; then
          echo "Error: Empty folder name detected"
          exit 1
        fi
        IMAGE_NAME="amitkarpe/${FOLDER_NAME}-demo"
        echo "name=$IMAGE_NAME" >> $GITHUB_OUTPUT
        echo "Building image: $IMAGE_NAME from folder: $FOLDER_NAME"
        
    - name: Build image with Buildah
      run: |
        echo "Building image with Buildah..."
        cd ${{ matrix.folder }}
        
        # Build using Buildah (equivalent to docker build)
        buildah build-using-dockerfile \
          --file Dockerfile \
          --tag ${{ steps.image.outputs.name }}:latest \
          .
          
        echo "✅ Build completed for ${{ steps.image.outputs.name }}"
        
    - name: Test built image with Podman
      run: |
        echo "Testing image with Podman..."
        
        # Test the image (equivalent to docker run)
        podman run --rm ${{ steps.image.outputs.name }}:latest echo "✅ Podman test successful" || echo "Image test completed"
        
        # Show image info
        podman images ${{ steps.image.outputs.name }}:latest
        
    - name: Login to multiple registries
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "Logging in to multiple registries..."
        
        # Create auth file for Skopeo
        mkdir -p ${HOME}/.config/containers
        
        # Login to Docker Hub
        echo "${{ secrets.DOCKER_PASSWORD }}" | skopeo login \
          --username "${{ secrets.DOCKER_USERNAME }}" \
          --password-stdin \
          docker.io
          
        # Login to GitHub Container Registry
        echo "${{ secrets.GITHUB_TOKEN }}" | skopeo login \
          --username "${{ github.actor }}" \
          --password-stdin \
          ghcr.io
          
        # Optional: Login to Quay.io (if secrets are provided)
        if [ -n "${{ secrets.QUAY_USERNAME }}" ] && [ -n "${{ secrets.QUAY_PASSWORD }}" ]; then
          echo "${{ secrets.QUAY_PASSWORD }}" | skopeo login \
            --username "${{ secrets.QUAY_USERNAME }}" \
            --password-stdin \
            quay.io
          echo "✅ Logged in to Docker Hub, GHCR, and Quay.io"
        else
          echo "✅ Logged in to Docker Hub and GHCR (Quay.io secrets not provided)"
        fi
          
    - name: Push to multiple registries
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "Pushing to multiple registries for rate limit mitigation..."
        
        # Define registry configurations
        DOCKER_HUB_IMAGE="docker://docker.io/${{ steps.image.outputs.name }}:latest"
        GHCR_IMAGE="docker://ghcr.io/${{ github.repository_owner }}/${{ matrix.folder }}-demo:latest"
        QUAY_IMAGE="docker://quay.io/${{ secrets.QUAY_USERNAME }}/${{ matrix.folder }}-demo:latest"
        LOCAL_IMAGE="containers-storage:${{ steps.image.outputs.name }}:latest"
        
        echo "📦 Pushing to registries:"
        echo "  - Docker Hub: ${{ steps.image.outputs.name }}:latest"
        echo "  - GHCR: ghcr.io/${{ github.repository_owner }}/${{ matrix.folder }}-demo:latest"
        if [ -n "${{ secrets.QUAY_USERNAME }}" ]; then
          echo "  - Quay.io: quay.io/${{ secrets.QUAY_USERNAME }}/${{ matrix.folder }}-demo:latest"
        fi
        
        # Push to Docker Hub (for compatibility)
        echo "🐳 Pushing to Docker Hub..."
        skopeo copy "$LOCAL_IMAGE" "$DOCKER_HUB_IMAGE"
        echo "✅ Successfully pushed to Docker Hub"
        
        # Push to GitHub Container Registry (no rate limits)
        echo "📦 Pushing to GitHub Container Registry..."
        skopeo copy "$LOCAL_IMAGE" "$GHCR_IMAGE"
        echo "✅ Successfully pushed to GHCR"
        
        # Push to Quay.io (if configured)
        if [ -n "${{ secrets.QUAY_USERNAME }}" ] && [ -n "${{ secrets.QUAY_PASSWORD }}" ]; then
          echo "🔴 Pushing to Quay.io..."
          skopeo copy "$LOCAL_IMAGE" "$QUAY_IMAGE"
          echo "✅ Successfully pushed to Quay.io"
        else
          echo "⏭️ Skipping Quay.io (secrets not configured)"
        fi
        
    - name: Verify images in registries
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "Verifying images in multiple registries..."
        
        # Verify Docker Hub
        echo "🔍 Verifying Docker Hub..."
        skopeo inspect docker://docker.io/${{ steps.image.outputs.name }}:latest
        
        # Verify GHCR
        echo "🔍 Verifying GHCR..."
        skopeo inspect docker://ghcr.io/${{ github.repository_owner }}/${{ matrix.folder }}-demo:latest
        
        # Verify Quay.io (if configured)
        if [ -n "${{ secrets.QUAY_USERNAME }}" ] && [ -n "${{ secrets.QUAY_PASSWORD }}" ]; then
          echo "🔍 Verifying Quay.io..."
          skopeo inspect docker://quay.io/${{ secrets.QUAY_USERNAME }}/${{ matrix.folder }}-demo:latest
        fi
        
        echo "✅ All registry verifications completed"
        
    - name: Cleanup
      if: always()
      run: |
        echo "Cleaning up local images..."
        
        # Remove local images to save space
        podman rmi ${{ steps.image.outputs.name }}:latest 2>/dev/null || true
        
        # Clean up build cache
        buildah rm --all 2>/dev/null || true
        
        echo "✅ Cleanup completed"